#version 450

#include "lib/utils.glsl"

layout(local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0) uniform sampler2D in_depth;

layout(set = 0, binding = 1) uniform CameraData {
    Camera camera;
};

layout(set = 0, binding = 2) writeonly buffer Probes {
    vec4 probe_positions[];
};

shared vec3 positions[16 * 16];

void main() {
    const uint group_index = gl_WorkGroupID.y * gl_NumWorkGroups.x + gl_WorkGroupID.x;

    const ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    const vec2 uv = vec2(gl_GlobalInvocationID.xy) / vec2(textureSize(in_depth, 0).xy);

    const float depth = texelFetch(in_depth, coord, 0).x;
    const vec3 world_pos = unproject(uv, depth, camera.inv_view_proj);

    positions[gl_LocalInvocationIndex] = world_pos;

    barrier();

    if(gl_LocalInvocationIndex == 0) {
        vec3 min_p = world_pos;
        vec3 max_p = world_pos;
        for(uint i = 1; i != 16 * 16; ++i) {
            min_p = min(min_p, positions[i]);
            max_p = max(max_p, positions[i]);
        }

        const vec3 center = 0.5 * (min_p + max_p);
        probe_positions[group_index] = vec4(center, 0.0);
    }
}

