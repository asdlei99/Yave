#version 450

#include "lib/utils.glsl"
#include "lib/gbuffer.glsl"
#include "lib/sh.glsl"

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0) uniform sampler2D in_depth;
layout(set = 0, binding = 1) uniform sampler2D in_color;
layout(set = 0, binding = 2) uniform sampler2D in_normal;

layout(set = 0, binding = 3) uniform CameraData {
	Camera camera;
};

layout(set = 0, binding = 4) writeonly buffer Surfels {
	Surfel surfels[];
};

void main() {
	const ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
	const uvec2 size = gl_NumWorkGroups.xy * gl_WorkGroupSize.xy;
	const vec2 uv = vec2(gl_GlobalInvocationID.xy) / vec2(size);
	const uint global_index = gl_GlobalInvocationID.y * size.x + gl_GlobalInvocationID.x;

	const float depth = texture(in_depth, uv).x;

	if(is_OOB(depth)) {
		return;
	}

	vec3 albedo;
	float metallic;
	vec3 normal;
	float roughness;
	unpack_color(texture(in_color, uv), albedo, metallic);
	unpack_normal(texture(in_normal, uv), normal, roughness);

	const vec3 world_pos = unproject(uv, depth, camera.inv_view_proj);

	Surfel surf;
	surf.position = world_pos;
	surf.albedo = albedo;
	surf.normal = normal;

	surfels[global_index] = surf;
}


