#version 450

#include "lib/gbuffer.glsl"

layout(local_size_x = 8, local_size_y = 8) in;

layout(rgba16f, set = 0, binding = 0) uniform image2D out_color;

layout(set = 0, binding = 1) uniform usampler2D in_ism;
layout(set = 0, binding = 2) uniform sampler2D in_depth;
layout(set = 0, binding = 3) uniform sampler2D in_rt0;
layout(set = 0, binding = 4) uniform sampler2D in_rt1;

layout(set = 0, binding = 5) uniform CameraData {
    Camera camera;
};

layout(set = 0, binding = 6) readonly buffer Probes {
    vec4 probe_positions[];
};

layout(set = 0, binding = 7) uniform Params_Inline {
    uvec2 ism_size;
    uvec2 ism_count;
};

void main() {
    const ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    const uvec2 ism_index = coord / ism_size;
    const uint ism_linear_index = ism_index.y * ism_count.x + ism_index.x;
    const vec2 ism_uv = fract(vec2(coord) / vec2(ism_size));

    const float inv_dist = uintBitsToFloat(texelFetch(in_ism, coord, 0).x);

    vec3 color = vec3(0.0);
    if(inv_dist > 0.0) {
        const vec3 direction = octahedron_decode(ism_uv) / inv_dist;
        const vec3 world_pos = probe_positions[ism_linear_index].xyz + direction;
        const vec2 rsm_uv = project(world_pos, camera.view_proj).xy;
        if(saturate(rsm_uv) == rsm_uv) {
            color = texture(in_rt0, rsm_uv).rgb;
        }
    }

    imageStore(out_color, coord, vec4(color, 1.0));
}

