#version 450

#include "lib/compute_derivatives.glsl"

#include "lib/lighting.glsl"
#include "lib/gbuffer.glsl"
#include "lib/shadow.glsl"
#include "lib/debug.glsl"


// -------------------------------- DEFINES --------------------------------

#define POINT_LIGHTS
#define SPOT_LIGHTS
// #define DEBUG


// -------------------------------- I/O --------------------------------

layout(local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0) uniform sampler2D in_depth;
layout(set = 0, binding = 1) uniform sampler2D in_rt0;
layout(set = 0, binding = 2) uniform sampler2D in_rt1;
layout(set = 0, binding = 3) uniform sampler2DShadow in_shadows;

layout(set = 0, binding = 4) uniform CameraData {
    Camera camera;
};

layout(set = 0, binding = 5) readonly buffer PointLights {
    PointLight point_lights[];
};

layout(set = 0, binding = 6) readonly buffer SpotLights {
    SpotLight spot_lights[];
};

layout(set = 0, binding = 7) readonly buffer Shadows {
    ShadowMapParams shadow_params[];
};

layout(rgba16f, set = 0, binding = 8) uniform image2D out_color;

layout(set = 1, binding = 0) uniform LightCount_Inline {
    uint point_count;
    uint spot_count;
};


// -------------------------------- SHARED --------------------------------

shared uint light_indices[max_tile_lights];
shared uint tile_point_count;
shared uint tile_spot_count;

shared vec3 tile_dir;
shared float tile_sin_alpha;

shared uvec2 tile_dist_bounds;

// -------------------------------- HELPERS --------------------------------

uvec2 dispatch_range(uint num) {
    const uint thread_count = gl_WorkGroupSize.x * gl_WorkGroupSize.y;
    const uint range = 1 + (num / thread_count);
    const uint begin = min(gl_LocalInvocationIndex * range, num);
    const uint end = min(begin + range, num);
    return uvec2(begin, end);
}


// -------------------------------- TILE INFOS --------------------------------

void compute_tile_culling_info(vec2 image_size) {
    const vec2 corner_uv = (gl_WorkGroupID.xy * gl_WorkGroupSize.xy) / image_size;
    const vec3 corner_unproj = unproject_ndc(vec3(corner_uv * 2.0 - 1.0, 1.0), camera.inv_view_proj);
    const vec3 corner_dir = normalize(corner_unproj - camera.position);


    const vec2 center_uv = ((gl_WorkGroupID.xy + 0.5) * gl_WorkGroupSize.xy) / image_size;
    const vec3 unproj = unproject_ndc(vec3(center_uv * 2.0 - 1.0, 1.0), camera.inv_view_proj);
    tile_dir = normalize(unproj - camera.position);

    const float tile_cos_alpha = dot(tile_dir, corner_dir);
    tile_sin_alpha = sqrt(1.0 - sqr(tile_cos_alpha));
}

void compute_tile_infos(vec2 image_size, float view_dist, bool is_oob) {
    if(gl_LocalInvocationIndex == 0) {
        compute_tile_culling_info(image_size);
        tile_point_count = 0;
        tile_spot_count = 0;
        tile_dist_bounds =  uvec2(floatBitsToUint(max_float), 0);
    }

    barrier();

    if(!is_oob) {
        const uint ui_dist = floatBitsToUint(view_dist);
        atomicMin(tile_dist_bounds.x, ui_dist);
        atomicMax(tile_dist_bounds.y, ui_dist);
    }

    barrier();
}


// -------------------------------- CULLING --------------------------------

bool is_inside(vec3 light_pos, float radius) {
    // TODO precompute to_light?
    const vec3 to_light = light_pos - camera.position;
    const float cos_alpha = max(0.0, dot(to_light, tile_dir));

    if(cos_alpha + radius < uintBitsToFloat(tile_dist_bounds.x) ||
       cos_alpha - radius > uintBitsToFloat(tile_dist_bounds.y)) {
        return false;
    }

    const vec3 closest = camera.position + tile_dir * cos_alpha;
    const float tile_radius = cos_alpha * tile_sin_alpha;
    const vec3 light_to_closest = closest - light_pos;
    return dot(light_to_closest, light_to_closest) <= sqr(radius + tile_radius);
}

void cull_points() {
    const uvec2 range = dispatch_range(point_count);

    for(uint i = range.x; i != range.y; ++i) {
        if(is_inside(point_lights[i].position, point_lights[i].radius)) {
            uint light_index = atomicAdd(tile_point_count, 1);
            if(light_index >= max_tile_lights) {
                break;
            }
            light_indices[light_index] = i;
        }
    }
}

void cull_spots() {
    const uvec2 range = dispatch_range(spot_count);

    for(uint i = range.x; i != range.y; ++i) {
        if(is_inside(spot_lights[i].encl_sphere_center, spot_lights[i].encl_sphere_radius)) {
            uint light_index = atomicAdd(tile_spot_count, 1) + tile_point_count;
            if(light_index >= max_tile_lights) {
                break;
            }
            light_indices[light_index] = i;
        }
    }
}

void cull_lights() {
#ifdef POINT_LIGHTS
    cull_points();
    barrier();
#endif

#ifdef SPOT_LIGHTS
    cull_spots();
    barrier();
#endif
}


// -------------------------------- MAIN --------------------------------

void main() {
    const ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    const vec2 image_size = vec2(imageSize(out_color).xy);
    const vec2 uv = vec2(gl_GlobalInvocationID.xy) / image_size;

    const float depth = texelFetch(in_depth, coord, 0).x;

    const vec3 world_pos = unproject(uv, depth, camera.inv_view_proj);

    vec3 view_dir = (camera.position - world_pos);
    const float view_dist = length(view_dir);
    view_dir /= view_dist;

    compute_tile_infos(image_size, view_dist, is_OOB(depth));

    cull_lights();

    if(is_OOB(depth)) {
        return;
    }

    vec3 irradiance = imageLoad(out_color, coord).rgb;

    const SurfaceInfo surface = read_gbuffer(texelFetch(in_rt0, coord, 0), texelFetch(in_rt1, coord, 0));

    const vec3 depth_normal = compute_depth_normal(world_pos, surface);

#ifdef POINT_LIGHTS
    // -------------------------------- POINTS --------------------------------
    const uint point_begin = 0;
    const uint point_end = min(max_tile_lights, tile_point_count);
    for(uint i = point_begin; i != point_end; ++i) {
        const PointLight light = point_lights[light_indices[i]];

        vec3 light_dir = light.position - world_pos;
        const float distance = length(light_dir);
        light_dir /= distance;
        const float att = attenuation(distance, light.radius, light.falloff);

        if(att > 0.0) {
            const vec3 radiance = light.color * att;
            irradiance += radiance * L0(light_dir, view_dir, surface);
        }
    }
#endif

#ifdef SPOT_LIGHTS
    // -------------------------------- SPOTS --------------------------------
    const uint spot_begin = tile_point_count;
    const uint spot_end = min(max_tile_lights, spot_begin + tile_spot_count);
    for(uint i = spot_begin; i != spot_end; ++i) {
        const SpotLight light = spot_lights[light_indices[i]];

        vec3 light_dir = light.position - world_pos;
        const float distance = length(light_dir);
        light_dir /= distance;

        const float spot_cos_alpha = -dot(light_dir, light.forward);
        const float spot = pow(max(0.0, (spot_cos_alpha - light.cos_angle) / (1.0 - light.cos_angle)), light.angle_exp);
        float att = spot * attenuation(distance, light.radius, light.falloff);

        if(att > 0.0 && light.shadow_map_index < 0xFFFFFFFF) {
            const ShadowMapParams params = shadow_params[light.shadow_map_index];
            const float bias = compute_automatic_bias(params, depth_normal, light_dir);
            att *= compute_shadow_pcf(in_shadows, params, world_pos, bias);
        }

        if(att > 0.0) {
            const vec3 radiance = light.color * att;
            irradiance += radiance * L0(light_dir, view_dir, surface);
        }
    }
#endif

#ifdef DEBUG
    {
        const float total_lights = float(tile_point_count + tile_spot_count);
        vec3 heat = heat_spectrum(total_lights / 16.0f);
        heat = mix(heat, vec3(1.0) - heat, print_value(gl_LocalInvocationID.xy * 2.0, vec2(0.0), vec2(8.0, 15.0), total_lights, 2.0, 0.0));
        irradiance = mix(heat, irradiance, 0.95);
    }
#endif

    imageStore(out_color, coord, vec4(irradiance, 1.0));
}

